name: .NET Framework Desktop Build

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clear NuGet cache
      shell: powershell
      run: nuget locals all -clear

    - name: Find Solution and Project Files
      id: find_files
      shell: powershell
      run: |
        $solutionFile = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter '*.sln' -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if (-not $solutionFile) {
          Write-Error "Solution file not found."
          exit 1
        } else {
          Write-Host "Found solution file: $solutionFile"
        }

        $projectFile = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter '*.csproj' -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if (-not $projectFile) {
          Write-Error "Project file not found."
          exit 1
        } else {
          Write-Host "Found project file: $projectFile"
        }

        echo "solution_file=$solutionFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "project_file=$projectFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Restore NuGet packages
      shell: powershell
      run: |
        nuget restore "${{ steps.find_files.outputs.solution_file }}"

    - name: Locate MSBuild
      id: msbuild
      shell: powershell
      run: |
        $vsInstallPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" `
          -latest `
          -products * `
          -requires Microsoft.Component.MSBuild `
          -property installationPath
        $msbuildPath = Join-Path $vsInstallPath 'MSBuild\Current\Bin\MSBuild.exe'
        Write-Host "MSBuild path: $msbuildPath"
        echo "msbuild_path=$msbuildPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Build solution
      shell: powershell
      run: |
        & "${{ steps.msbuild.outputs.msbuild_path }}" "${{ steps.find_files.outputs.solution_file }}" /p:Configuration=Release /p:Platform="AnyCPU"

    - name: Determine Output Executable Name and Type
      id: exe_info
      shell: powershell
      run: |
        $projectFile = "${{ steps.find_files.outputs.project_file }}"
        [xml]$csprojXml = Get-Content $projectFile

        $assemblyName = $null
        $outputType = $null

        foreach ($pg in $csprojXml.Project.PropertyGroup) {
          if (-not $assemblyName -and $pg.AssemblyName) {
            $assemblyName = $pg.AssemblyName
          }
          if (-not $outputType -and $pg.OutputType) {
            $outputType = $pg.OutputType
          }
          if ($assemblyName -and $outputType) { break }
        }

        if (-not $assemblyName) {
          $assemblyName = [System.IO.Path]::GetFileNameWithoutExtension($projectFile)
        }

        if (-not $outputType) {
          Write-Error "OutputType not specified in project file."
          exit 1
        }

        switch ($outputType.ToLower()) {
          "winexe" { $extension = ".exe" }
          "exe"    { $extension = ".exe" }
          "library"{ $extension = ".dll" }
          default  {
            Write-Error "Unknown OutputType: $outputType"
            exit 1
          }
        }

        $exeName = "$assemblyName$extension"
        echo "exe_name=$exeName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Verify Executable Exists
      shell: powershell
      run: |
        $exePath = "bin/Release/${{ steps.exe_info.outputs.exe_name }}"
        if (!(Test-Path -Path $exePath)) {
          Write-Error "Executable not found at $exePath"
          exit 1
        } else {
          Write-Host "Executable found at $exePath"
        }

    - name: Upload release asset
      uses: softprops/action-gh-release@v1
      with:
        files: 'bin/Release/${{ steps.exe_info.outputs.exe_name }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
